{
    "1": {
        "Type": "Graph",
        "Title": "Temperature Overview",
        "DefaultRange": "3h",
        "Minimised": true,
        "Maximisable": true,
        "RefreshRate": "1m",
        "widgetClass": "w-1/2 bg-white rounded-xl shadow-lg border border-gray-200 p-0 h-64 backdrop-blur-sm bg-opacity-90 cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-300 hover:border-blue-300",
        "Queries": [
            {
                "Flux": "from(bucket: \"Machines\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Temperature\")  |> filter(fn: (r) => r[\"Node\"] == \"T1-HUR\")  |> filter(fn: (r) => r[\"Name\"] != \"Enclosure\" and r[\"Name\"] !~ /Elec/ and r[\"Name\"] !~ /Reference/)  |> drop(columns: [\"SensorID\",\"Node\"])",
                "Units": "°C",
                "Pivot": "Location"
            }
        ]
    },
    "2": {
        "Type": "Graph",
        "Title": "Acceleration Overview",
        "DefaultRange": "3h",
        "Minimised": true,
        "Maximisable": true,
        "RefreshRate": "1m",
        "widgetClass": "w-1/2 bg-white rounded-xl shadow-lg border border-gray-200 p-0 h-64 backdrop-blur-sm bg-opacity-90 cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-300 hover:border-blue-300",
        "Queries": [
            {
                "Flux": "from(bucket: \"Machines_Summary\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Acceleration\")  |> filter(fn: (r) => r[\"Node\"] =~ /A[0-9]-HUR/)  |> filter(fn: (r) => r[\"_field\"] == \"Max\")  |>drop(columns: [\"Node\"])  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: true)  |> map(fn: (r) => ({r with _value: float(v: r._value) / 10000.0}))",
                "Units": "g",
                "Pivot": "Axis"
            }
        ]
    },
    "3": {
        "Type": "Graph",
        "Title": "Current Overview",
        "DefaultRange": "10m",
        "Minimised": true,
        "Maximisable": true,
        "RefreshRate": "1m",
        "widgetClass": "w-1/2 bg-white rounded-xl shadow-lg border border-gray-200 p-0 h-64 backdrop-blur-sm bg-opacity-90 cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-300 hover:border-blue-300",
        "Queries": [
            {
                "Flux": "from(bucket: \"Machines_Summary\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Current\")  |> filter(fn: (r) => r[\"Node\"] =~ /C[0-9]-HUR/)  |> filter(fn: (r) => r[\"_field\"] == \"Max\")  |>drop(columns: [\"Node\"])  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: true)  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1000.0}))",
                "Units": "A",
                "Pivot": "Phase"
                
            }
        ]
    },
    "4": {
        "Type": "Stat",
        "Title": "Coolant Temperature",
        "DefaultRange": "6h",
        "Minimised": true,
        "Maximisable": true,
        "RefreshRate": "1m",
        "widgetClass": "col-6 bg-white rounded-xl shadow-lg border border-gray-200 flex flex-col justify-center items-center p-6 h-32 cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-300 hover:border-blue-300 backdrop-blur-sm bg-opacity-90",
        "Queries": [
            {
                "Flux": "from(bucket: \"Machines\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Coolant\")  |> filter(fn: (r) => r[\"Machine\"] == \"Hurco\")  |> filter(fn: (r) => r[\"_field\"] == \"Temperature\")  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false) |> map(fn: (r) => ({r with _value: float(v: r._value) / 10.0}))",
                "Units": "°C"
            }
        ]
    },
    "5": {
        "Type": "Stat",
        "Title": "Coolant Level",
        "DefaultRange": "24h",
        "Minimised": true,
        "Maximisable": true,
        "RefreshRate": "1m",
        "Queries": [
            {
                "Flux": "from(bucket: \"Machines\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Coolant\")  |> filter(fn: (r) => r[\"Machine\"] == \"Hurco\")  |> filter(fn: (r) => r[\"_field\"] == \"Level\")  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false) |> map(fn: (r) => ({r with _value: float(v: r._value) / 100.0}))",
                "Units": "mm",
                "Pivot": false
            }
        ]
    },
    "6": {
        "Type": "Stat",
        "Title": "Coolant Flow",
        "DefaultRange": "10m",
        "Minimised": true,
        "Maximisable": true,
        "RefreshRate": "1m",
        "Queries": [
            {
                "Flux": "from(bucket: \"Machines\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Coolant\")  |> filter(fn: (r) => r[\"Machine\"] == \"Hurco\")  |> filter(fn: (r) => r[\"_field\"] == \"Instantaneous_flow\")  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false) |> map(fn: (r) => ({r with _value: float(v: r._value) / 100.0}))",
                "Units": "L/mm",
                "Pivot": false
            }
        ]
    },
    "7": {
        "Type": "Stat",
        "Title": "Coolant Concentration",
        "DefaultRange": "10m",
        "Minimised": true,
        "Maximisable": true,
        "RefreshRate": "1m",
        "Queries": [
            {
                "Flux": "from(bucket: \"Machines\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Coolant\")  |> filter(fn: (r) => r[\"Machine\"] == \"Hurco\")  |> filter(fn: (r) => r[\"_field\"] == \"Concentration\")  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false) |> map(fn: (r) => ({r with _value: float(v: r._value) / 100.0}))",
                "Units": "Brix(%)",
                "Pivot": false
            }
        ]
    },
    "8": {
        "Type": "Graph",
        "Title": "Dropdown/Probing Overview",
        "DefaultRange": "3h",
        "Minimised": true,
        "Maximisable": true,
        "RefreshRate": "1m",
        "Queries": [
            {
                "Flux": "from(bucket: \"Machines\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Temperature\")  |> filter(fn: (r) => r[\"Node\"] == \"T1-HUR\")    |> filter(fn: (r) => r[\"Name\"] != \"Enclosure\")  |> drop(columns: [\"SensorID\",\"Node\"])  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
                "Units": "°C",
                "Pivot": "Name",
                "Axis": 0,
                "Limit": 5,
                "LimitType": "Max"
            },
            {
                "Flux": "from(bucket: \"Machines\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Temperature\")  |> filter(fn: (r) => r[\"Node\"] =~ /T[0-9]-HUR/)  |> filter(fn: (r) => r[\"Name\"] != \"Enclosure\" and r[\"Name\"] !~ /Elec/ and r[\"Name\"] !~ /Reference/)  |> drop(columns: [\"SensorID\",\"Node\"])  |> group()  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
                "Units": "°C",
                "Pivot": false,
                "Axis": 0
            },
            {
                "Flux": "from(bucket: \"Probing\")  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)  |> filter(fn: (r) => r[\"_measurement\"] == \"Error\")  |> filter(fn: (r) => r[\"Machine\"] == \"Robodrill\")  |> group(columns: [\"_field\"])  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)    |> map(fn: (r) => ({r with _value: float(v: r._value) * 1000.0}))",
                "Units": "µm",
                "Pivot": "_field",
                "Axis": 1
            }
        ]
    },
    "9": {
        "Type": "Info",
        "Title": "Air Flow",
        "DefaultRange": "10m",
        "Minimised": true,
        "RefreshRate": "1m",
        "Queries": [
            {
                "Flux": "import \"array\" realData  = from(bucket: \"Machines\")  |> range(start: -1m, stop: now())  |> filter(fn: (r) => r[\"_measurement\"] == \"AirQuality\")  |> filter(fn: (r) => r[\"Machine\"] == \"Cincinnati\")  |> filter(fn: (r) => r[\"_field\"] == \"valve_status\")  |>last() fallback = array.from(rows: [{  _time: now(),  _start:now(),  _stop: now(),  _value: -1.0,  _field: \"valve_status\",   Machine: \"Tool\",  _measurement: \"AirQuality\"}]) union(tables: [realData, fallback]) |>group()  |> sort(columns: [\"_time\"], desc: false)  |> limit(n: 1)  |> map(fn: (r) => ({r with _value: if r._value == 1 then \"Open\" else if r._value == 0 then \"Closed\" else \"Unknown\"}))",
                "Units": false,
                "Pivot": false
            }
        ]
    },
    "10":{
        "Type": "Button",
        "Title": "Open/Close Valve",
        "Action": "python3 /home/ecmpg/Data/Python/toggleValve.py",
        "Arguments": ["Hurco"],
        "ConfirmAction": true,
        "ConfirmMessage": "Are you sure you want to toggle the valve state?"
    },
    "SensorList": ["A1-HUR","A2-HUR","A3-HUR","C1-HUR","T1-HUR"]
}